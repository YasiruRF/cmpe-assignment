// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.1.0 Build 162 10/23/2013 SJ Web Edition"

// DATE "05/25/2025 15:46:22"

// 
// Device: Altera EP3C16F484C6 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module AmultiplyB (
	A,
	B,
	P);
input 	[1:0] A;
input 	[1:0] B;
output 	[3:0] P;

// Design Ports Information
// P[0]	=>  Location: PIN_A5,	 I/O Standard: 2.5 V,	 Current Strength: Default
// P[1]	=>  Location: PIN_V5,	 I/O Standard: 2.5 V,	 Current Strength: Default
// P[2]	=>  Location: PIN_R1,	 I/O Standard: 2.5 V,	 Current Strength: Default
// P[3]	=>  Location: PIN_N2,	 I/O Standard: 2.5 V,	 Current Strength: Default
// A[0]	=>  Location: PIN_L6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// B[0]	=>  Location: PIN_P1,	 I/O Standard: 2.5 V,	 Current Strength: Default
// A[1]	=>  Location: PIN_T9,	 I/O Standard: 2.5 V,	 Current Strength: Default
// B[1]	=>  Location: PIN_P2,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \P[0]~output_o ;
wire \P[1]~output_o ;
wire \P[2]~output_o ;
wire \P[3]~output_o ;
wire \B[0]~input_o ;
wire \A[0]~input_o ;
wire \partial0[0]~0_combout ;
wire \B[1]~input_o ;
wire \A[1]~input_o ;
wire \Add0~0_combout ;
wire \Add0~1_combout ;
wire \Add0~2_combout ;


// Location: IOOBUF_X7_Y29_N9
cycloneiii_io_obuf \P[0]~output (
	.i(\partial0[0]~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\P[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \P[0]~output .bus_hold = "false";
defparam \P[0]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X3_Y0_N30
cycloneiii_io_obuf \P[1]~output (
	.i(\Add0~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\P[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \P[1]~output .bus_hold = "false";
defparam \P[1]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y10_N9
cycloneiii_io_obuf \P[2]~output (
	.i(\Add0~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\P[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \P[2]~output .bus_hold = "false";
defparam \P[2]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y12_N16
cycloneiii_io_obuf \P[3]~output (
	.i(\Add0~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\P[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \P[3]~output .bus_hold = "false";
defparam \P[3]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X0_Y11_N22
cycloneiii_io_ibuf \B[0]~input (
	.i(B[0]),
	.ibar(gnd),
	.o(\B[0]~input_o ));
// synopsys translate_off
defparam \B[0]~input .bus_hold = "false";
defparam \B[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y13_N1
cycloneiii_io_ibuf \A[0]~input (
	.i(A[0]),
	.ibar(gnd),
	.o(\A[0]~input_o ));
// synopsys translate_off
defparam \A[0]~input .bus_hold = "false";
defparam \A[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X1_Y11_N24
cycloneiii_lcell_comb \partial0[0]~0 (
// Equation(s):
// \partial0[0]~0_combout  = (\B[0]~input_o  & \A[0]~input_o )

	.dataa(gnd),
	.datab(\B[0]~input_o ),
	.datac(\A[0]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\partial0[0]~0_combout ),
	.cout());
// synopsys translate_off
defparam \partial0[0]~0 .lut_mask = 16'hC0C0;
defparam \partial0[0]~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: IOIBUF_X0_Y11_N15
cycloneiii_io_ibuf \B[1]~input (
	.i(B[1]),
	.ibar(gnd),
	.o(\B[1]~input_o ));
// synopsys translate_off
defparam \B[1]~input .bus_hold = "false";
defparam \B[1]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X1_Y0_N8
cycloneiii_io_ibuf \A[1]~input (
	.i(A[1]),
	.ibar(gnd),
	.o(\A[1]~input_o ));
// synopsys translate_off
defparam \A[1]~input .bus_hold = "false";
defparam \A[1]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X1_Y11_N2
cycloneiii_lcell_comb \Add0~0 (
// Equation(s):
// \Add0~0_combout  = (\B[1]~input_o  & (\A[0]~input_o  $ (((\B[0]~input_o  & \A[1]~input_o ))))) # (!\B[1]~input_o  & (\B[0]~input_o  & ((\A[1]~input_o ))))

	.dataa(\B[1]~input_o ),
	.datab(\B[0]~input_o ),
	.datac(\A[0]~input_o ),
	.datad(\A[1]~input_o ),
	.cin(gnd),
	.combout(\Add0~0_combout ),
	.cout());
// synopsys translate_off
defparam \Add0~0 .lut_mask = 16'h6CA0;
defparam \Add0~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X1_Y11_N4
cycloneiii_lcell_comb \Add0~1 (
// Equation(s):
// \Add0~1_combout  = (\B[1]~input_o  & (\A[1]~input_o  & ((!\A[0]~input_o ) # (!\B[0]~input_o ))))

	.dataa(\B[1]~input_o ),
	.datab(\B[0]~input_o ),
	.datac(\A[0]~input_o ),
	.datad(\A[1]~input_o ),
	.cin(gnd),
	.combout(\Add0~1_combout ),
	.cout());
// synopsys translate_off
defparam \Add0~1 .lut_mask = 16'h2A00;
defparam \Add0~1 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X1_Y11_N6
cycloneiii_lcell_comb \Add0~2 (
// Equation(s):
// \Add0~2_combout  = (\B[1]~input_o  & (\B[0]~input_o  & (\A[0]~input_o  & \A[1]~input_o )))

	.dataa(\B[1]~input_o ),
	.datab(\B[0]~input_o ),
	.datac(\A[0]~input_o ),
	.datad(\A[1]~input_o ),
	.cin(gnd),
	.combout(\Add0~2_combout ),
	.cout());
// synopsys translate_off
defparam \Add0~2 .lut_mask = 16'h8000;
defparam \Add0~2 .sum_lutc_input = "datac";
// synopsys translate_on

assign P[0] = \P[0]~output_o ;

assign P[1] = \P[1]~output_o ;

assign P[2] = \P[2]~output_o ;

assign P[3] = \P[3]~output_o ;

endmodule
